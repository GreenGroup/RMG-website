# Generated by Django 2.2 on 2019-11-01 13:56

from django.db import migrations, models
import django.db.models.deletion
import rmgweb.rmg.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdjlistConversion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dict_file', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('species_dictionary.txt'), verbose_name='RMG Dictionary')),
            ],
        ),
        migrations.CreateModel(
            name='Chemkin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chem_file', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('chemkin/chem.inp'), verbose_name='Chemkin File')),
                ('dict_file', models.FileField(blank=True, null=True, upload_to=rmgweb.rmg.models.uploadTo('RMG_Dictionary.txt'), verbose_name='RMG Dictionary')),
                ('foreign', models.BooleanField(verbose_name='Not an RMG-generated Chemkin file')),
            ],
        ),
        migrations.CreateModel(
            name='Diff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chem_file1', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('chem1.inp'), verbose_name='Model 1: Chemkin File')),
                ('dict_file1', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('RMG_Dictionary1.txt'), verbose_name='Model 1: RMG Dictionary')),
                ('foreign1', models.BooleanField(verbose_name='Model 1 not an RMG-generated Chemkin file')),
                ('chem_file2', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('chem2.inp'), verbose_name='Model 2: Chemkin File')),
                ('dict_file2', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('RMG_Dictionary2.txt'), verbose_name='Model 2: RMG Dictionary')),
                ('foreign2', models.BooleanField(verbose_name='Model 2 not an RMG-generated Chemkin file')),
            ],
        ),
        migrations.CreateModel(
            name='FluxDiagram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_file', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('input.py'), verbose_name='RMG Input File')),
                ('chem_file', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('chem.inp'), verbose_name='Chemkin File')),
                ('dict_file', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('species_dictionary.txt'), verbose_name='RMG Dictionary')),
                ('chem_output', models.FileField(blank=True, null=True, upload_to=rmgweb.rmg.models.uploadTo('chemkin_output.out'), verbose_name='Chemkin Output File (Optional)')),
                ('java', models.BooleanField(verbose_name='From RMG-Java')),
                ('max_nodes', models.PositiveIntegerField(default=50, verbose_name='Maximum Nodes')),
                ('max_edges', models.PositiveIntegerField(default=50, verbose_name='Maximum Edges')),
                ('time_step', models.FloatField(default=1.25, verbose_name='Multiplicative Time Step Factor')),
                ('concentration_tol', models.FloatField(default=1e-06, verbose_name='Concentration Tolerance')),
                ('species_rate_tol', models.FloatField(default=1e-06, verbose_name='Species Rate Tolerance')),
            ],
        ),
        migrations.CreateModel(
            name='Input',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_upload', models.FileField(blank=True, upload_to=rmgweb.rmg.models.uploadTo('input_upload.py'), verbose_name='Input File')),
                ('pdep', models.CharField(choices=[('off', 'off'), ('modified strong collision', 'Modified Strong Collision'), ('reservoir state', 'Reservoir State')], default='off', max_length=50)),
                ('max_grain_size', models.FloatField(blank=True, default=2, null=True)),
                ('grain_size_units', models.CharField(choices=[('kcal/mol', 'kcal/mol'), ('kJ/mol', 'kJ/mol')], default='kcal/mol', max_length=50)),
                ('min_num_of_grains', models.PositiveIntegerField(blank=True, default=200, null=True)),
                ('max_atoms', models.PositiveIntegerField(blank=True, null=True)),
                ('p_low', models.FloatField(blank=True, null=True)),
                ('p_high', models.FloatField(blank=True, null=True)),
                ('prange_units', models.CharField(choices=[('bar', 'bar'), ('torr', 'torr'), ('atm', 'atm')], default='bar', max_length=50)),
                ('p_interp', models.PositiveIntegerField(blank=True, default=5, null=True)),
                ('temp_low', models.FloatField(blank=True, null=True)),
                ('temp_high', models.FloatField(blank=True, null=True)),
                ('temprange_units', models.CharField(choices=[('K', 'K'), ('C', 'C')], default='K', max_length=50)),
                ('temp_interp', models.PositiveIntegerField(blank=True, default=8, null=True)),
                ('interpolation', models.CharField(choices=[('chebyshev', 'Chebyshev'), ('pdeparrhenius', 'Pressure Dependent Arrhenius')], default='chebyshev', max_length=50)),
                ('temp_basis', models.PositiveIntegerField(blank=True, default=6, null=True)),
                ('p_basis', models.PositiveIntegerField(blank=True, default=4, null=True)),
                ('tol_move_to_core', models.FloatField(default=0.1)),
                ('tol_keep_in_edge', models.FloatField(default=0.0)),
                ('tol_interrupt_simulation', models.FloatField(default=1.0)),
                ('maximum_edge_species', models.PositiveIntegerField(default=100000)),
                ('min_core_size_for_prune', models.PositiveIntegerField(default=50)),
                ('min_species_exist_iterations_for_prune', models.PositiveIntegerField(default=2)),
                ('filter_reactions', models.BooleanField(default=False)),
                ('simulator_atol', models.FloatField(default=1e-16)),
                ('simulator_rtol', models.FloatField(default=1e-08)),
                ('simulator_sens_atol', models.FloatField(default=1e-06)),
                ('simulator_sens_rtol', models.FloatField(default=0.0001)),
                ('quantum_calc', models.CharField(choices=[('off', 'off'), ('on', 'on')], default='off', max_length=50)),
                ('software', models.CharField(choices=[('mopac', 'MOPAC'), ('gaussian', 'GAUSSIAN')], default='off', max_length=50)),
                ('method', models.CharField(choices=[('pm3', 'pm3'), ('pm6', 'pm6'), ('pm7', 'pm7 (MOPAC2012 only)')], default='off', max_length=50)),
                ('file_store', models.CharField(blank=True, default='QMfiles', max_length=100)),
                ('scratch_directory', models.CharField(blank=True, default='QMscratch', max_length=100)),
                ('only_cyclics', models.BooleanField(default=True)),
                ('max_rad_number', models.PositiveSmallIntegerField(blank=True, default=0)),
                ('species_constraints', models.CharField(choices=[('off', 'off'), ('on', 'on')], default='off', max_length=50)),
                ('allowed_input_species', models.BooleanField(default=False)),
                ('allowed_seed_mechanisms', models.BooleanField(default=False)),
                ('allowed_reaction_libraries', models.BooleanField(default=False)),
                ('max_carbon_atoms', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('max_oxygen_atoms', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('max_nitrogen_atoms', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('max_silicon_atoms', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('max_sulfur_atoms', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('max_heavy_atoms', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('max_rad_electrons', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('allow_singlet_O2', models.BooleanField(default=False)),
                ('save_restart_period', models.FloatField(blank=True, null=True)),
                ('save_restart_period_units', models.CharField(choices=[('second', 'seconds'), ('hour', 'hours'), ('day', 'days'), ('week', 'weeks')], default='hour', max_length=50)),
                ('generate_output_html', models.BooleanField(default=False)),
                ('generate_plots', models.BooleanField(default=False)),
                ('save_simulation_profiles', models.BooleanField(default=False)),
                ('save_edge_species', models.BooleanField(default=False)),
                ('verbose_comments', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PopulateReactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_file', models.FileField(upload_to=rmgweb.rmg.models.uploadTo('input.txt'), verbose_name='Input File')),
            ],
        ),
        migrations.CreateModel(
            name='ThermoLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thermo_lib', models.CharField(blank=True, choices=[('BurcatNS', 'BurcatNS'), ('BurkeH2O2', 'BurkeH2O2'), ('C10H11', 'C10H11'), ('C3', 'C3'), ('CBS_QB3_1dHR', 'CBS_QB3_1dHR'), ('CH', 'CH'), ('CHN', 'CHN'), ('CHO', 'CHO'), ('CHON', 'CHON'), ('CN', 'CN'), ('Chernov', 'Chernov'), ('Chlorinated_Hydrocarbons', 'Chlorinated_Hydrocarbons'), ('CurranPentane', 'CurranPentane'), ('DFT_QCI_thermo', 'DFT_QCI_thermo'), ('FFCM1(-)', 'FFCM1(-)'), ('Fulvene_H', 'Fulvene_H'), ('GRI-Mech3.0', 'GRI-Mech3.0'), ('GRI-Mech3.0-N', 'GRI-Mech3.0-N'), ('JetSurF1.0', 'JetSurF1.0'), ('JetSurF2.0', 'JetSurF2.0'), ('Klippenstein_Glarborg2016', 'Klippenstein_Glarborg2016'), ('Lai_Hexylbenzene', 'Lai_Hexylbenzene'), ('NISTThermoLibrary', 'NISTThermoLibrary'), ('NOx2018', 'NOx2018'), ('Narayanaswamy', 'Narayanaswamy'), ('NitrogenCurran', 'NitrogenCurran'), ('SABIC_aromatics', 'SABIC_aromatics'), ('SulfurGlarborgBozzelli', 'SulfurGlarborgBozzelli'), ('SulfurGlarborgH2S', 'SulfurGlarborgH2S'), ('SulfurGlarborgMarshall', 'SulfurGlarborgMarshall'), ('SulfurGlarborgNS', 'SulfurGlarborgNS'), ('SulfurHaynes', 'SulfurHaynes'), ('SulfurLibrary', 'SulfurLibrary'), ('USC-Mech-ii', 'USC-Mech-ii'), ('bio_oil', 'bio_oil'), ('naphthalene_H', 'naphthalene_H'), ('primaryNS', 'primaryNS'), ('primaryThermoLibrary', 'primaryThermoLibrary'), ('surfaceThermoNi', 'surfaceThermoNi'), ('surfaceThermoPt', 'surfaceThermoPt'), ('thermo_DFT_CCSDTF12_BAC', 'thermo_DFT_CCSDTF12_BAC'), ('vinylCPD_H', 'vinylCPD_H')], max_length=200)),
                ('input', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thermo_libraries', to='rmg.Input')),
            ],
        ),
        migrations.CreateModel(
            name='ReactorSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('identifier', models.CharField(blank=True, max_length=200)),
                ('adjlist', models.TextField()),
                ('mole_frac', models.FloatField()),
                ('inert', models.BooleanField()),
                ('input', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactor_species', to='rmg.Input')),
            ],
        ),
        migrations.CreateModel(
            name='Reactor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField()),
                ('temperature_units', models.CharField(choices=[('K', 'K'), ('C', 'C')], default='K', max_length=50)),
                ('pressure', models.FloatField()),
                ('pressure_units', models.CharField(choices=[('bar', 'bar'), ('torr', 'torr'), ('atm', 'atm')], default='bar', max_length=50)),
                ('terminationtime', models.FloatField()),
                ('time_units', models.CharField(choices=[('ms', 'ms'), ('s', 's'), ('hr', 'hr')], default='s', max_length=50)),
                ('species', models.CharField(blank=True, max_length=50, null=True)),
                ('conversion', models.FloatField(blank=True, null=True)),
                ('sensitivity', models.CharField(blank=True, max_length=200, null=True)),
                ('sensitivity_threshold', models.FloatField(default=0.001)),
                ('input', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactor_systems', to='rmg.Input')),
            ],
        ),
        migrations.CreateModel(
            name='ReactionLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_lib', models.CharField(blank=True, choices=[('1989_Stewart_2CH3_to_C2H5_H', '1989_Stewart_2CH3_to_C2H5_H'), ('2001_Tokmakov_H_Toluene_to_CH3_Benzene', '2001_Tokmakov_H_Toluene_to_CH3_Benzene'), ('2003_Miller_Propargyl_Recomb_High_P', '2003_Miller_Propargyl_Recomb_High_P'), ('2005_Senosiain_OH_C2H2', '2005_Senosiain_OH_C2H2'), ('2006_Joshi_OH_CO', '2006_Joshi_OH_CO'), ('2009_Sharma_C5H5_CH3_highP', '2009_Sharma_C5H5_CH3_highP'), ('2015_Buras_C2H3_C4H6_highP', '2015_Buras_C2H3_C4H6_highP'), ('BurkeH2O2inArHe', 'BurkeH2O2inArHe'), ('BurkeH2O2inN2', 'BurkeH2O2inN2'), ('C10H11', 'C10H11'), ('C2H4+O_Klipp2017', 'C2H4+O_Klipp2017'), ('C3', 'C3'), ('C6H5_C4H4_Mebel', 'C6H5_C4H4_Mebel'), ('Chernov', 'Chernov'), ('CurranPentane', 'CurranPentane'), ('DMSOxy', 'DMSOxy'), ('Dooley/C1', 'Dooley/C1'), ('Dooley/methylformate', 'Dooley/methylformate'), ('Dooley/methylformate_2', 'Dooley/methylformate_2'), ('Dooley/methylformate_all_ARHEbathgas', 'Dooley/methylformate_all_ARHEbathgas'), ('Dooley/methylformate_all_N2bathgas', 'Dooley/methylformate_all_N2bathgas'), ('ERC-FoundationFuelv0.9', 'ERC-FoundationFuelv0.9'), ('Ethylamine', 'Ethylamine'), ('FFCM1(-)', 'FFCM1(-)'), ('First_to_Second_Aromatic_Ring/2005_Ismail_C6H5_C4H6_highP', 'First_to_Second_Aromatic_Ring/2005_Ismail_C6H5_C4H6_highP'), ('First_to_Second_Aromatic_Ring/2012_Matsugi_C3H3_C7H7_highP', 'First_to_Second_Aromatic_Ring/2012_Matsugi_C3H3_C7H7_highP'), ('First_to_Second_Aromatic_Ring/2016_Mebel_C10H9_highP', 'First_to_Second_Aromatic_Ring/2016_Mebel_C10H9_highP'), ('First_to_Second_Aromatic_Ring/2016_Mebel_C9H9_highP', 'First_to_Second_Aromatic_Ring/2016_Mebel_C9H9_highP'), ('First_to_Second_Aromatic_Ring/2016_Mebel_Indene_CH3_highP', 'First_to_Second_Aromatic_Ring/2016_Mebel_Indene_CH3_highP'), ('First_to_Second_Aromatic_Ring/2017_Buras_C6H5_C3H6_highP', 'First_to_Second_Aromatic_Ring/2017_Buras_C6H5_C3H6_highP'), ('First_to_Second_Aromatic_Ring/2017_Mebel_C6H4C2H_C2H2_highP', 'First_to_Second_Aromatic_Ring/2017_Mebel_C6H4C2H_C2H2_highP'), ('First_to_Second_Aromatic_Ring/2017_Mebel_C6H5C2H2_C2H2_highP', 'First_to_Second_Aromatic_Ring/2017_Mebel_C6H5C2H2_C2H2_highP'), ('First_to_Second_Aromatic_Ring/2017_Mebel_C6H5_C2H2_highP', 'First_to_Second_Aromatic_Ring/2017_Mebel_C6H5_C2H2_highP'), ('First_to_Second_Aromatic_Ring/2017_Mebel_C6H5_C4H4_highP', 'First_to_Second_Aromatic_Ring/2017_Mebel_C6H5_C4H4_highP'), ('First_to_Second_Aromatic_Ring/phenyl_diacetylene_effective', 'First_to_Second_Aromatic_Ring/phenyl_diacetylene_effective'), ('Fulvene_H', 'Fulvene_H'), ('GRI-HCO', 'GRI-HCO'), ('GRI-Mech3.0', 'GRI-Mech3.0'), ('GRI-Mech3.0-N', 'GRI-Mech3.0-N'), ('Glarborg/C0', 'Glarborg/C0'), ('Glarborg/C1', 'Glarborg/C1'), ('Glarborg/C2', 'Glarborg/C2'), ('Glarborg/C3', 'Glarborg/C3'), ('Glarborg/highP', 'Glarborg/highP'), ('HydrazinePDep', 'HydrazinePDep'), ('JetSurF1.0', 'JetSurF1.0'), ('JetSurF2.0', 'JetSurF2.0'), ('Klippenstein_Glarborg2016', 'Klippenstein_Glarborg2016'), ('Lai_Hexylbenzene', 'Lai_Hexylbenzene'), ('Mebel_C6H5_C2H2', 'Mebel_C6H5_C2H2'), ('Mebel_Naphthyl', 'Mebel_Naphthyl'), ('Methylformate', 'Methylformate'), ('N-S_interactions', 'N-S_interactions'), ('NOx2018', 'NOx2018'), ('Narayanaswamy', 'Narayanaswamy'), ('Nitrogen_Dean_and_Bozzelli', 'Nitrogen_Dean_and_Bozzelli'), ('Nitrogen_Glarborg_Gimenez_et_al', 'Nitrogen_Glarborg_Gimenez_et_al'), ('Nitrogen_Glarborg_Lucassen_et_al', 'Nitrogen_Glarborg_Lucassen_et_al'), ('Nitrogen_Glarborg_Zhang_et_al', 'Nitrogen_Glarborg_Zhang_et_al'), ('Sulfur/DMDS', 'Sulfur/DMDS'), ('Sulfur/DMS', 'Sulfur/DMS'), ('Sulfur/DTBS', 'Sulfur/DTBS'), ('Sulfur/GlarborgBozzelli', 'Sulfur/GlarborgBozzelli'), ('Sulfur/GlarborgH2S', 'Sulfur/GlarborgH2S'), ('Sulfur/GlarborgH2S/alt', 'Sulfur/GlarborgH2S/alt'), ('Sulfur/GlarborgMarshall', 'Sulfur/GlarborgMarshall'), ('Sulfur/GlarborgNS', 'Sulfur/GlarborgNS'), ('Sulfur/HSSH_1bar', 'Sulfur/HSSH_1bar'), ('Sulfur/Hexanethial_nr', 'Sulfur/Hexanethial_nr'), ('Sulfur/Sendt', 'Sulfur/Sendt'), ('Sulfur/TP_Song', 'Sulfur/TP_Song'), ('Sulfur/Thial_Hydrolysis', 'Sulfur/Thial_Hydrolysis'), ('Surface/CPOX_Pt/Deutschmann2006', 'Surface/CPOX_Pt/Deutschmann2006'), ('Surface/Deutschmann_Ni', 'Surface/Deutschmann_Ni'), ('Surface/Deutschmann_Ni_full', 'Surface/Deutschmann_Ni_full'), ('Surface/Example', 'Surface/Example'), ('TEOS', 'TEOS'), ('biCPD_H_shift', 'biCPD_H_shift'), ('c-C5H5_CH3_Sharma', 'c-C5H5_CH3_Sharma'), ('combustion_core/version2', 'combustion_core/version2'), ('combustion_core/version3', 'combustion_core/version3'), ('combustion_core/version4', 'combustion_core/version4'), ('combustion_core/version5', 'combustion_core/version5'), ('fascella', 'fascella'), ('kislovB', 'kislovB'), ('naphthalene_H', 'naphthalene_H'), ('ox_and_decomp_for_oxygenated', 'ox_and_decomp_for_oxygenated'), ('primaryNitrogenLibrary', 'primaryNitrogenLibrary'), ('primaryNitrogenLibrary/LowT', 'primaryNitrogenLibrary/LowT'), ('primarySulfurLibrary', 'primarySulfurLibrary'), ('vinylCPD_H', 'vinylCPD_H')], max_length=200)),
                ('edge', models.BooleanField()),
                ('seed_mech', models.BooleanField()),
                ('input', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reaction_libraries', to='rmg.Input')),
            ],
        ),
    ]
